name: Release Branch Creation & Changelog

on:
  create:
  push:
    branches:
      - "release/**"
      - "hotfix/**"

jobs:
  release-branch-setup:
    if: github.event_name == 'create' && github.event.ref_type == 'branch' && (startsWith(github.event.ref, 'release/') || startsWith(github.event.ref, 'hotfix/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout the new branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Analyze branch and version
        id: version_info
        run: |
          BRANCH_NAME="${{ github.event.ref }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          if [[ $BRANCH_NAME == release/* ]]; then
            VERSION=$(echo $BRANCH_NAME | sed 's/release\///')
            TYPE="release"
            BASE_BRANCH="develop"
            SHOULD_BUMP_DEVELOP="true"
          elif [[ $BRANCH_NAME == hotfix/* ]]; then
            VERSION=$(echo $BRANCH_NAME | sed 's/hotfix\///')
            TYPE="hotfix"
            BASE_BRANCH="main"
            SHOULD_BUMP_DEVELOP="false"
          fi

          # Ensure version starts with 'v'
          if [[ ! $VERSION == v* ]]; then
            VERSION="v$VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "should_bump_develop=$SHOULD_BUMP_DEVELOP" >> $GITHUB_OUTPUT
          echo "clean_version=$(echo $VERSION | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Generate changelog using Ruby script
        id: changelog
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          echo "🚀 Generating changelog for $VERSION..."

          # Make the script executable
          chmod +x scripts/generate_changelog.rb

          # Run changelog generation
          if ruby scripts/generate_changelog.rb --version "$VERSION" --force 2>&1; then
            echo "✅ Changelog generation completed"
            
            # Check if CHANGELOG.md was actually updated
            if git diff --quiet CHANGELOG.md; then
              echo "⚠️  CHANGELOG.md was not modified by Ruby script"
              CHANGELOG_STATUS="false"
            else
              echo "✅ CHANGELOG.md was updated"
              git diff --stat CHANGELOG.md
              CHANGELOG_STATUS="true"
            fi
            
            echo "changelog_updated=$CHANGELOG_STATUS" >> $GITHUB_OUTPUT
          else
            echo "❌ Changelog generation failed"
            echo "changelog_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version in package.json
        run: |
          VERSION="${{ steps.version_info.outputs.clean_version }}"
          echo "📝 Updating version to $VERSION in package.json..."

          if [ -f "package.json" ]; then
            node -e "
              const fs = require('fs');
              const pkg = require('./package.json');
              pkg.version = '$VERSION';
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n');
            "
            echo "✅ Updated package.json to version $VERSION"
          fi

      - name: Create preparation PR branch
        id: pr_branch
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          TYPE="${{ steps.version_info.outputs.type }}"
          RELEASE_BRANCH="${{ steps.version_info.outputs.branch_name }}"

          # Create PR branch for changelog and version updates
          PR_BRANCH="chore/prepare-$TYPE-$VERSION"
          git checkout -b "$PR_BRANCH"
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT

          # Add all changes
          git add .

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Create commit message
            CHANGELOG_STATUS="${{ steps.changelog.outputs.changelog_updated }}"
            if [[ "$CHANGELOG_STATUS" == "true" ]]; then
              CHANGELOG_INFO="- Generate release changelog"
            else
              CHANGELOG_INFO="- Changelog generation skipped (manual update needed)"
            fi
            
            # Commit with multiline message
            git commit -m "chore: prepare $VERSION $TYPE" \
                       -m "" \
                       -m "- Update version to ${{ steps.version_info.outputs.clean_version }} in package.json" \
                       -m "$CHANGELOG_INFO" \
                       -m "" \
                       -m "This commit prepares the $RELEASE_BRANCH branch for $TYPE."
            
            # Push the PR branch
            git push origin "$PR_BRANCH"
          fi

      - name: Create preparation PR
        if: steps.pr_branch.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          TYPE="${{ steps.version_info.outputs.type }}"
          RELEASE_BRANCH="${{ steps.version_info.outputs.branch_name }}"
          PR_BRANCH="${{ steps.pr_branch.outputs.pr_branch }}"
          CHANGELOG_STATUS="${{ steps.changelog.outputs.changelog_updated }}"

          # Build PR body based on changelog status
          if [[ "$CHANGELOG_STATUS" == "true" ]]; then
            CHANGELOG_SECTION="- ✅ Generated changelog entries\n- Categorized commits since last release"
          else
            CHANGELOG_SECTION="- ⚠️ Changelog generation was skipped (manual update needed)\n- Please manually update CHANGELOG.md before merging"
          fi

          PR_BODY="## Summary
          Automated preparation for $TYPE $VERSION.

          This PR was automatically created when the $RELEASE_BRANCH branch was detected.

          ## Changes Made

          ### 📝 Version Updates
          - Updated version to ${{ steps.version_info.outputs.clean_version }} in package.json

          ### 📋 Changelog
          $CHANGELOG_SECTION

          ## Auto-generated
          This PR was automatically created by GitHub Actions when the $TYPE branch was created.

          **Review and merge when ready** - this prepares the $TYPE branch for completion."

          # Create PR to the release branch
          gh pr create \
            --base "$RELEASE_BRANCH" \
            --head "$PR_BRANCH" \
            --title "chore: prepare $VERSION $TYPE" \
            --body "$PR_BODY" \
            --label "chore" \
            --label "auto-generated" \
            --label "$TYPE"

      - name: Create release preparation summary
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          TYPE="${{ steps.version_info.outputs.type }}"
          BRANCH_NAME="${{ steps.version_info.outputs.branch_name }}"
          CHANGELOG_STATUS="${{ steps.changelog.outputs.changelog_updated }}"

          echo "## 📋 $TYPE $VERSION Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Type**: $TYPE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Actions" >> $GITHUB_STEP_SUMMARY
          if [[ "$CHANGELOG_STATUS" == "true" ]]; then
            echo "- 📋 Generated changelog" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Changelog generation skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- 📝 Updated version in package.json" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.pr_branch.outputs.has_changes }}" == "true" ]]; then
            echo "- 📋 Created preparation PR to \`$BRANCH_NAME\` branch" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ No changes needed (already up to date)" >> $GITHUB_STEP_SUMMARY
          fi

  # JOB 2: Bump develop branch version (only for releases, not hotfixes)
  bump-develop-version:
    if: github.event_name == 'create' && github.event.ref_type == 'branch' && startsWith(github.event.ref, 'release/')
    needs: release-branch-setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next development version
        id: next_version
        run: |
          RELEASE_BRANCH="${{ github.event.ref }}"
          CURRENT_VERSION=$(echo $RELEASE_BRANCH | sed 's/release\///')

          # Ensure version starts with 'v'
          if [[ ! $CURRENT_VERSION == v* ]]; then
            CURRENT_VERSION="v$CURRENT_VERSION"
          fi

          # Auto-calculate next version (default behavior - always minor bump)
          MAJOR=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1/')
          MINOR=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\2/')

          # Increment minor version for next development cycle
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="v$MAJOR.$NEXT_MINOR.0"
          CLEAN_NEXT_VERSION="$MAJOR.$NEXT_MINOR.0"

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "clean_next_version=$CLEAN_NEXT_VERSION" >> $GITHUB_OUTPUT

          echo "Current release: $CURRENT_VERSION"
          echo "Next development version: $NEXT_VERSION"

      - name: Update develop branch with next version
        run: |
          CLEAN_VERSION="${{ steps.next_version.outputs.clean_next_version }}"
          echo "📝 Updating develop branch to $CLEAN_VERSION..."

          if [ -f "package.json" ]; then
            node -e "
              const fs = require('fs');
              const pkg = require('./package.json');
              pkg.version = '$CLEAN_VERSION';
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n');
            "
            echo "✅ Updated package.json to version $CLEAN_VERSION"
          fi

      - name: Create version bump PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION="${{ steps.next_version.outputs.current_version }}"
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"

          # Create PR branch
          PR_BRANCH="chore/bump-version-to-$NEXT_VERSION-dev"
          git checkout -b "$PR_BRANCH"

          # Add and commit changes
          git add .
          git commit -m "chore: bump version to $NEXT_VERSION for next development cycle" \
                     -m "" \
                     -m "Following release branch creation for $RELEASE_VERSION, updating develop" \
                     -m "branch to target the next minor version $NEXT_VERSION." \
                     -m "" \
                     -m "Changes:" \
                     -m "- Update package.json version to ${{ steps.next_version.outputs.clean_next_version }}" \
                     -m "- Prepare for next development cycle" \
                     -m "" \
                     -m "This maintains the Git Flow pattern where develop always contains" \
                     -m "the next planned version."

          # Push PR branch
          git push origin "$PR_BRANCH"

          # Create PR body
          PR_BODY="## Summary
          Automatic version bump following release branch creation.

          ## Details
          - **Release Branch Created**: \`${{ github.event.ref }}\`
          - **Release Version**: $RELEASE_VERSION  
          - **Next Development Version**: $NEXT_VERSION

          ## Changes Made
          - 📝 Updated version in package.json to ${{ steps.next_version.outputs.clean_next_version }}
          - 🎯 Prepared develop branch for next development cycle

          ## Git Flow Pattern
          This maintains the Git Flow pattern where:
          - \`develop\` always contains the next planned version
          - Release branches contain the current release version
          - After release cutoff, develop moves to next minor version

          ## Auto-generated
          This PR was automatically created when the release branch was created.

          **Safe to merge** - contains only version bumps."

          # Create pull request
          gh pr create \
            --base develop \
            --head "$PR_BRANCH" \
            --title "chore: bump version to $NEXT_VERSION for next development cycle" \
            --body "$PR_BODY" \
            --label "chore" \
            --label "auto-generated" \
            --label "version-bump"

      - name: Create develop bump summary
        run: |
          RELEASE_VERSION="${{ steps.next_version.outputs.current_version }}"
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"

          echo "## 🔄 Develop Version Bump" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Branch**: \`${{ github.event.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Release Version**: $RELEASE_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Next Dev Version**: $NEXT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Actions Completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Calculated next minor version: $NEXT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Updated develop branch package.json" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Created PR to merge version bump" >> $GITHUB_STEP_SUMMARY
